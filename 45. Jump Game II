#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

class Solution {
public:
    int jump(std::vector<int>& nums) {

        ios::sync_with_stdio(false), cin.tie(0), cout.tie(0); // to make the software run faster

        int n = nums.size(); // variable that represents the size of the array

        if (n <= 1) // condition: if the size is less than or equal to 1, return 0
            return 0;

        int steps = 0; // steps
        int maxLength = 0; // maximum length
        int minLength = 0; // minimum length

        for (int i = 0; i < n - 1; i++) { // condition for loop: if index i is less than the size minus 1
            maxLength = max(maxLength, i + nums[i]); // update maximum length 

            if (i == minLength) { // if index equals minimum length
                minLength = maxLength; // minimum length equals maximum length
                steps++;
            }
            if (minLength >= n - 1) // if minimum length is greater than or equal to the size of the array minus 1
                break; // exit the loop
        }
        return steps; // return steps
    }
};
int main()
{
    vector<int> nums{ 2,3,1,1,4 };

    Solution s;

    cout << s.jump(nums);

    return 0;
}
